createdAt: "2019-11-19T12:55:40.174Z"
updatedAt: "2019-11-19T12:56:16.379Z"
type: "SNIPPET_NOTE"
folder: "f1fd0a362703e39f5960"
title: "分析additional_transforms.py代码 - comp_feats_release"
tags: []
description: "分析additional_transforms.py代码 - comp_feats_release"
snippets: [
  {
    linesHighlighted: []
    name: "additional_transforms.py"
    mode: "Python"
    content: '''
      import torch
      from PIL import ImageEnhance
      
      transformtypedict=dict(Brightness=ImageEnhance.Brightness, Contrast=ImageEnhance.Contrast, Sharpness=ImageEnhance.Sharpness, Color=ImageEnhance.Color)
      
      
      
      class ImageJitter(object):
          def __init__(self, transformdict):
              self.transforms = [(transformtypedict[k], transformdict[k]) for k in transformdict]
      
      
          def __call__(self, img):
              out = img
              randtensor = torch.rand(len(self.transforms))
      
              for i, (transformer, alpha) in enumerate(self.transforms):
                  r = alpha*(randtensor[i]*2.0 -1.0) + 1
                  out = transformer(out).enhance(r).convert('RGB')
      
              return out
    '''
  }
]
isStarred: false
isTrashed: false
