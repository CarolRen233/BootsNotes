createdAt: "2021-03-30T03:36:59.516Z"
updatedAt: "2021-04-14T02:38:07.362Z"
type: "MARKDOWN_NOTE"
folder: "7b95254d4d023f3965f1"
title: "torch用法"
tags: []
content: '''
  # torch用法
  
  [toc]
  
  ## 生成张量
  
  `torch.tensor()`
  `torch.manual_seed(7)`生成随机种子，保证生成的随机数字是可以重复的
  
  `torch.rand((1, 5))`生成元素为0~1的1×5的均匀分布的张量
  `torch.randn((1, 5))`生成元素为0~1的1×5的正态分布的张量
  
  `torch.rand_like(features)`生成维度和features一样的0~1均匀分布的张量
  `torch.randn_like(features)`生成维度和features一样的0~1正态分布的张量
  
  ## 运算
  
  `a*b`矩阵之间的element-wise 乘法,要求矩阵的形状必须一致(或者是其中一个维度为1)
  
  
  `torch.sum(a)`求a所有元素的和
  `torch.sum(a, dim=0)`对a所有的列求和
  `torch.sum(a, dim=1)`对a所有的行求和
  
  
  `torch.mul(a, b)`是矩阵a和b对应位相乘，a和b的维度必须相等，比如a的维度是(1, 2)，b的维度是(1, 2)，返回的仍是(1, 2)的矩阵
  `torch.mm(a, b)`是矩阵a和b矩阵相乘，比如a的维度是(1, 2)，b的维度是(2, 3)，返回的就是(1, 3)的矩阵
  
  ## 和numpy的转化
  
  `torch.from_numpy(a)`将numpy数据a转化成torch数据
  
  `b.numpy()`将torch数据b转化成numpy
  
  
  ## 改变形状
  
  >* `weights.reshape(a, b)` will return a new tensor with the same data as `weights` with size `(a, b)` sometimes, and sometimes a clone, as in it copies the data to another part of memory.
  >* `weights.resize_(a, b)` returns the same tensor with a different shape. However, if the new shape results in fewer elements than the original tensor, some elements will be removed from the tensor (but not from memory). If the new shape results in more elements than the original tensor, new elements will be uninitialized in memory. Here I should note that the underscore at the end of the method denotes that this method is performed **in-place**. Here is a great forum thread to [read more about in-place operations](https://discuss.pytorch.org/t/what-is-in-place-operation/16244) in PyTorch.
  >* `weights.view(a, b)` will return a new tensor with the same data as `weights` with size `(a, b)`.
  >* `torch.transpose(weights,0,1)` will return transposed weights tensor. This returns transposed version of inpjut tensor along dim 0 and dim 1. This is efficient since we do not specify to actual dimesions of weights.
  >* One more approach is to use `.t()` to transpose vector of weights, in our case from (1,5) to (5,1) shape.
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
